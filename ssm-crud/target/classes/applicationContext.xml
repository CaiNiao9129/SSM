<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
		http://mybatis.org/schema/mybatis-spring 
		http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.0.xsd">
		
	<!-- spring管理所有的业务逻辑 -->
	<context:component-scan base-package="com.cduestc.crud">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<context:property-placeholder location="classpath:db.properties" />
	<!--spring来控制数据源，事务控制，aop -->
		<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
			<property name="user" value="${jdbc.user}"></property>
			<property name="password" value="${jdbc.password}"></property>
			<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
			<property name="driverClass" value="${jdbc.driver}"></property>
		</bean>
	<!--整合mybatis 
		目的：1；spring管理所有组件，mapper的实现类
			service==》Dao, @Autowired：自动注入mapper
			2：spring用来管理事务，spring声明示事务
	 -->
	 <!--创建sqlsessionFactory对象  -->
	 <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	 	<!-- configLocation指定全局配置文件的位置 -->
	 	<property name="configLocation" value="classpath:mybatis-config.xml"></property>
	 	<property name="dataSource" ref="dataSource"></property>
		<!--  mapperLocations 指定mapper文件的位置 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
	 </bean>
	 
	 
	 <!-- 配置一个可以 执行批量执行的sqlsession -->
	 <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
	 	<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
	 	<constructor-arg name="executorType" value="BATCH"></constructor-arg>
	 </bean>
	 <!-- 扫描所有的mapper接口的实现，让这些mapper能够自动注入
	       -->
	  <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	  		<property name="basePackage" value="com.cduestc.crud.dao"></property>
	  </bean>
	<!-- spring事务管理器 -->
	<bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
			<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- k开启基于注解的事务，和使用xml配置形式的事务,(重要的使用配置形式的)-->
	<aop:config>
		<!-- 切入点表达式 -->
		<aop:pointcut expression="execution(* com.cduestc.crud.service..*(..))" id="txPoint"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
	</aop:config>
	<!--配置事务增强，配置事务如何切入  -->
	<tx:advice id="txAdvice" transaction-manager="dataSourceTransactionManager">
		<tx:attributes>
		<!--切入的所有方法都是事务方法  -->
			<tx:method name="*"/>
			<!-- get方法 -->
			<tx:method name="get*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	
</beans>
